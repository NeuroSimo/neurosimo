#!/bin/bash

set -e

# Check if Ansible is installed
if ! command -v ansible-playbook &> /dev/null; then
    echo "Ansible is not installed. Installing Ansible..."
    sudo apt update && sudo apt install -y software-properties-common
    sudo add-apt-repository --yes --update ppa:ansible/ansible
    sudo apt install -y ansible
fi

# Prompt for sudo password once
read -s -p "Enter sudo password: " SUDO_PASS
echo ""

# Run the Docker installation playbook
ANSIBLE_BECOME_PASS=$SUDO_PASS ansible-playbook -i 'localhost,' ansible/install-docker.yml --extra-vars "ansible_become_password=$SUDO_PASS"

# Run the Docker installation playbook
ANSIBLE_BECOME_PASS=$SUDO_PASS ansible-playbook -i 'localhost,' ansible/install-ros.yml --extra-vars "ansible_become_password=$SUDO_PASS"

# Run the NeuroSimo setup playbook
ANSIBLE_BECOME_PASS=$SUDO_PASS ansible-playbook -i 'localhost,' ansible/install-neurosimo.yml --extra-vars "ansible_become_password=$SUDO_PASS"

# Function to check if the kernel is preempt_rt
is_preempt_rt() {
    # Option 1: Check kernel version string for various RT indicators
    if uname -r | grep -qi "preempt_rt\|realtime"; then
        return 0
    fi

    # Option 2: Check uname -a for PREEMPT_RT
    if uname -a | grep -q "PREEMPT_RT"; then
        return 0
    fi

    # Option 3: Check kernel config for RT configs
    KERNEL_CONFIG="/boot/config-$(uname -r)"
    if [ -f "$KERNEL_CONFIG" ] && (grep -q "^CONFIG_PREEMPT_RT=y\|^CONFIG_PREEMPT_RT_FULL=y" "$KERNEL_CONFIG"); then
        return 0
    fi

    return 1
}

# Check if preempt_rt kernel is installed, and if so, prompt user for NVIDIA driver installation
if is_preempt_rt; then
    echo "Preempt-RT kernel detected."

    # Prompt user for NVIDIA driver installation
    read -p "Do you want to install NVIDIA drivers for Preempt-RT kernel? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo ""
        echo "Please ensure that you are running this script in a text console (not a graphical terminal)."
        echo "Press Ctrl+Alt+F3 to switch to a text console if necessary."
        echo ""
        echo "Note: you may need to switch back to the text console (Ctrl+Alt+F3) during the installation process if the display goes blank."
        echo ""
        read -p "Press Enter to continue..."
        echo ""

        ansible-playbook -i 'localhost,' ansible/install-nvidia-drivers-preempt-rt.yml --extra-vars "ansible_become_password=$SUDO_PASS"
    fi
else
    echo "Warning: Preempt-RT kernel not detected. Please install a Preempt-RT kernel for real-time capabilities."
fi

# Run the NVIDIA Container Toolkit installation playbook; note that this needs to be run after the NVIDIA driver installation
ANSIBLE_BECOME_PASS=$SUDO_PASS ansible-playbook -i 'localhost,' ansible/install-nvidia-container-toolkit.yml --extra-vars "ansible_become_password=$SUDO_PASS"

# Build ROS workspace
echo "Building ROS interfaces..."
./scripts/build-ros-interfaces

# Source the updated environment
source ~/.bash_env

# Create 'example' project
echo "Creating 'example' project..."

# Check if example project exists
if [ -d "$PROJECTS_ROOT/example" ]; then
    echo "Warning: Example project already exists, skipping creation"
else
    echo "Creating 'example' project..."
    ./scripts/create-project example
fi

# Build NeuroSimo
echo "Building NeuroSimo..."
./scripts/build-neurosimo

echo "Installation complete. Opening .env file for configuration..."

# Check if gedit is available and we're in a graphical environment
if command -v gedit &> /dev/null && [ -n "$DISPLAY" ]; then
    echo "Opening .env file in gedit for editing..."
    gedit .env &
    echo "Please modify the .env file to your needs, then save and close the editor."
else
    echo "Please modify the .env file to your needs."
    echo "You can edit it with: gedit .env"
fi

echo ""
echo "For first-time installations, a reboot is recommended to ensure all changes take effect"
echo "(kernel modules, drivers, environment variables, etc.)."
echo ""
read -p "Do you want to reboot now? [y/N] " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Rebooting system..."
    sudo reboot
else
    echo "Reboot skipped. You can reboot later with: sudo reboot"
fi
echo ""
