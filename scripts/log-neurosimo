#!/bin/bash

# Usage examples:
# ./log [container_name] --from "YYYY-MM-DD HH:MM:SS" --to "YYYY-MM-DD HH:MM:SS"
# ./log [container_name] --last-hour
# ./log [container_name] --save output.log
# ./log [container_name] -n 50

CONTAINER_NAME=""
FROM=""
TO=""
FOLLOW=true          # Default to follow mode
SAVE_TO=""
TIME_FILTERS=false   # Indicator for specific time filters
TAIL_LINES="100"     # Default to the last 100 lines

# Print usage
function print_usage() {
    echo ""
    echo "Usage examples:"
    echo "./log [container_name] -n 1000       # Show the last 1000 lines, default is 100"
    echo "./log [container_name] --save output.log  # Save logs to a file"
    echo "./log [container_name] --last-hour        # Show logs from the last hour"
    echo "./log [container_name] --from \"YYYY-MM-DD HH:MM:SS\" --to \"YYYY-MM-DD HH:MM:SS\""
    echo ""
    echo "If no container name is provided, logs from all containers will be shown."
    echo ""
    echo "Container names include:"
    echo ""
    echo "  - preprocessor"
    echo "  - decider"
    echo "  - presenter"
    echo ""
    echo "See docker-compose.yml for a complete list."
    exit 0
}

# Parse arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --from) FROM=$2; FOLLOW=false; TIME_FILTERS=true; shift 2;;
        --to) TO=$2; FOLLOW=false; TIME_FILTERS=true; shift 2;;
        --last-hour) FROM="1 hour ago"; FOLLOW=false; TIME_FILTERS=true; shift;;
        --last-day) FROM="1 day ago"; FOLLOW=false; TIME_FILTERS=true; shift;;
        --last-minute) FROM="1 minute ago"; FOLLOW=false; TIME_FILTERS=true; shift;;
        --save) SAVE_TO=$2; shift 2;;
        --follow) FOLLOW=true; shift;;
        -f) FOLLOW=true; shift;;
        -n) TAIL_LINES=$2; shift 2;;
        --help|-h) print_usage;;
        *)
            if [[ -z "$CONTAINER_NAME" ]]; then
                CONTAINER_NAME=$1
            else
                echo "Unknown parameter passed: $1"; exit 1;
            fi
            shift;;
    esac
done

# Check if the save file exists and prompt for overwrite if necessary
if [ ! -z "$SAVE_TO" ] && [ -f "$SAVE_TO" ]; then
    read -p "$SAVE_TO exists. Overwrite? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Operation cancelled."
        exit 1
    fi
fi

# XXX: Use a non-breaking space to add padding between the timestamp and the log message. For some reason,
#   the default space character does not work as expected.

# Define sed command for timestamp formatting

# Define ANSI color codes
COLOR_RESET=$(echo -e '\033[0m')
COLOR_CONTAINER=$(echo -e '\033[0;36m')  # Cyan for container name
COLOR_TIMESTAMP=$(echo -e '\033[0;33m')  # Yellow for timestamp
COLOR_DEFAULT=$(echo -e '\033[0;37m')    # White for the rest of the text
COLOR_HIGH_INTENSITY_WHITE=$(echo -e '\033[0;97m')  # High-intensity white

# XXX: Use a non-breaking space to add padding between the timestamp and the log message. For some reason,
#   the default space character does not work as expected.
NON_BREAKING_SPACE=$(echo -e '\xC2\xA0')

# Remove "-1" suffix from container name and add color (handles underscores and hyphens correctly)
REMOVE_SUFFIX_CMD="sed -E \"s/^([[:alnum:]_-]+)-1(\s+\|)/${COLOR_CONTAINER}\1\2${COLOR_DEFAULT}/\" --unbuffered"

# Format timestamp, add non-breaking spaces, and color
FORMAT_TIMESTAMP_CMD="sed -E \"s/([0-9]{4}-[0-9]{2}-[0-9]{2})T([0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3})\+[0-9]{2}:[0-9]{2}/${COLOR_TIMESTAMP}\1 \2${COLOR_DEFAULT}${NON_BREAKING_SPACE}${NON_BREAKING_SPACE}${NON_BREAKING_SPACE}/g\" --unbuffered"

# Remove numeric suffixes from log labels (e.g., "[decider-1]" becomes "[decider]")
CLEAN_LABELS_CMD="sed -E 's/\[([[:alnum:]_-]+)-[0-9]+\]/[\1]/g' --unbuffered"

# Remove ROS2 timestamps (e.g., "[1726757089.965811963]")
REMOVE_ROS_TIMESTAMPS_CMD="sed -E 's/\[[0-9]+\.[0-9]+\]\s+//g' --unbuffered"

# Pad INFO and WARN messages to align with ERROR
PAD_MESSAGE_TYPES_CMD="sed -E 's/\[(INFO|WARN)\]/[\1 ]/g' --unbuffered"

# Change color to high-intensity white after the third colon
HIGHLIGHT_AFTER_THIRD_COLON_CMD="sed \"s/\\(:[^:]*:[^:]*:\\)\\(.*\\)$/\\1${COLOR_HIGH_INTENSITY_WHITE}\\2/\" --unbuffered"

# Add default color to the beginning of each line
ADD_DEFAULT_COLOR_CMD="sed \"s/^/${COLOR_DEFAULT}/\" --unbuffered"

# Reset color at the end of each line
RESET_COLOR_CMD="sed \"s/$/${COLOR_RESET}/\" --unbuffered"

# Combine all formatting commands
FORMAT_CMD="$REMOVE_SUFFIX_CMD | $FORMAT_TIMESTAMP_CMD | $CLEAN_LABELS_CMD | $REMOVE_ROS_TIMESTAMPS_CMD | $PAD_MESSAGE_TYPES_CMD | $HIGHLIGHT_AFTER_THIRD_COLON_CMD | $ADD_DEFAULT_COLOR_CMD | $RESET_COLOR_CMD"


# Use docker-compose logs if a container name is provided, otherwise use journalctl. This is because it is
# difficult to filter the last n lines of logs outputted by a given container using journalctl.
if [ -n "$CONTAINER_NAME" ] && [ "$TIME_FILTERS" = false ]; then
    CMD="docker-compose -f $NEUROSIMO_ROOT/docker-compose.yml logs --timestamps --tail $TAIL_LINES"
    [ "$FOLLOW" = true ] && CMD="$CMD -f"
    CMD="$CMD $CONTAINER_NAME"

    # XXX: Use a custom script to convert UTC to local time. This is a workaround for docker-compose not
    #   supporting local timezones in logs.
    CMD="$CMD | docker-compose-logs-localtime"

    CMD="$CMD | $FORMAT_CMD"

    # XXX: Filter out the "Failed to parse type hash" messages. These are not useful; should look more closely
    #   into what generates them.
    CMD="$CMD | grep -v 'Failed to parse type hash'"

    [ ! -z "$SAVE_TO" ] && CMD="$CMD | tee $SAVE_TO"

    eval $CMD
else
    CMD="journalctl -u neurosimo -b"
    if [ "$TIME_FILTERS" = false ]; then
        CMD="$CMD --lines $TAIL_LINES"
    fi
    [ ! -z "$FROM" ] && CMD="$CMD --since \"$FROM\""
    [ ! -z "$TO" ] && CMD="$CMD --until \"$TO\""
    [ "$FOLLOW" = true ] && CMD="$CMD -f"

    if [ -n "$CONTAINER_NAME" ]; then
        CMD="$CMD | grep $CONTAINER_NAME"
    fi

    # XXX: Filter out the "Failed to parse type hash" messages. These are not useful; should look more closely
    #   into what generates them.
    CMD="$CMD | grep -v 'Failed to parse type hash'"

    [ ! -z "$SAVE_TO" ] && CMD="$CMD | tee $SAVE_TO"

    eval $CMD
fi
